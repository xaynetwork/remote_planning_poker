name: Planning Poker Release

on:
  pull_request:

  # workflow_dispatch:
  #   inputs:
  #     tag:
  #       required: false
  #       description: a tag that will be used for identifying this version (aws-ecr-repo/repo-name:$TAG)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  DENY_WARNINGS: false
  DOCKER_REPO_BASE_URL: ${{ vars.DOCKER_REPO_BASE_URL }}
  tag: "test" 

jobs:
  rust-build:
    runs-on: hetzner-pm
    container:
      image: xaynetci/yellow:v13
    timeout-minutes: 45
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3.4.0

      - uses: Swatinem/rust-cache@359a70e43a0bb8a13953b04a90f76428b4959bb6 # v2.2.0
        with:
          key: rust-build

      - name: Install Node.js and OpenSSL
        run: |
          curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
          apt-get install -y libssl-dev nodejs pkg-config

      - name: Install dependencies
        run: just install-deps

      - name: Build artifacts
        run: just build

      - name: Create archive
        run: tar -cvf remote_planning_poker.tar target/release/backend frontend/dist

      - name: Upload archive
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # v3.1.1
        with:
          name: remote_planning_poker
          retention-days: 1
          if-no-files-found: error
          path: remote_planning_poker.tar

  docker-build:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    needs: [rust-build]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3.4.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          role-to-assume: ${{ secrets.AWS_ECR_REPOSITORY_OIDC_ROLE }}
          aws-region: eu-central-1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0

      - name: Download artifacts
        id: artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: remote_planning_poker

      - name: Untar files
        run: tar -xvf remote_planning_poker.tar

      - name: Create image
        run: |
          tar -xvf remote_planning_poker.tar
          TAG=${{ env.tag }}
          if [ -z "$TAG" ]; then
            TAG=$(git describe --tags --always)
          fi
          echo "TAG=${TAG}" >> $GITHUB_ENV

          function create_image() {
            cd "remote_planning_poker/$1"
            FQ_DOCKER_NAME="${DOCKER_REPO_BASE_URL}/$1:${TAG}"
            docker build -t "$FQ_DOCKER_NAME" . 1>&2
            echo "$FQ_DOCKER_NAME"
          }

          IMAGE_NAME=($(create_image "remote-planning-poker" | tail -n1))
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: docker push
        id: docker-push
        run: docker push "$IMAGE_NAME"
